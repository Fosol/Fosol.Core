<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Collections_ResizeList_Add_CompatibleType" xml:space="preserve">
    <value>Parameter "{0}" must be a compatible type.</value>
  </data>
  <data name="Collections_ResizeList_CopyTo" xml:space="preserve">
    <value>Parameter "{0}" must not be a multi-dimensional array.</value>
  </data>
  <data name="Collections_ResizeList_Enumerator_Current" xml:space="preserve">
    <value>The enumerator index position is invalid.</value>
  </data>
  <data name="Collections_ResizeList_Enumerator_MoveNext" xml:space="preserve">
    <value>The enumerator version has been changed and can no longer enumerate.</value>
  </data>
  <data name="Collections_ResizeList_Enumerator_Reset" xml:space="preserve">
    <value>The enumerator version has been changed and can not be reset.</value>
  </data>
  <data name="Collections_ResizeList_Insert_CompatibleType" xml:space="preserve">
    <value>Paramter "{0}" must be a compatible type.</value>
  </data>
  <data name="Collections_ResizeList_Property_CompatibleType" xml:space="preserve">
    <value>Property "{0}" must be a compatible type.</value>
  </data>
  <data name="Extensions_Bytes_ByteExtensions_ToStream_CanWrite" xml:space="preserve">
    <value>Parameter "{0}.CanWrite" must be true.</value>
  </data>
  <data name="Extensions_Streams_StreamExtensions_CopyTo_CanRead" xml:space="preserve">
    <value>Parameter "{0}.CanRead" must be true.</value>
  </data>
  <data name="Extensions_Streams_StreamExtensions_CopyTo_CanWrite" xml:space="preserve">
    <value>Parameter "{0}.CanWrite" must be true.</value>
  </data>
  <data name="Extensions_Streams_StreamExtensions_SaveToFile_CanRead" xml:space="preserve">
    <value>Parameter "{0}.CanRead" must be true.</value>
  </data>
  <data name="Extensions_Streams_StreamExtensions_WriteToString_CanRead" xml:space="preserve">
    <value>Parameter "{0}.CanRead" must be true.</value>
  </data>
  <data name="Extensions_Strings_StringExtensions_ToStream_CanWrite" xml:space="preserve">
    <value>Parameter "{0}.CanWrite" must be true.</value>
  </data>
  <data name="Extensions_Types_TypeExtensions_GetElementType" xml:space="preserve">
    <value>Parameter "{0}" must inherit from IEnumerable.</value>
  </data>
  <data name="Reflection_ReflectionHelper_ConstructObject" xml:space="preserve">
    <value>Parameter "{0}" is not a valid type.</value>
  </data>
  <data name="Validation_Argument_AssertFormat_IsEmail" xml:space="preserve">
    <value>Parameter "{0}" must be a valid email.</value>
  </data>
  <data name="Validation_Argument_AssertFormat_IsFSA" xml:space="preserve">
    <value>Parameter "{0}" must be a valid postal code FSA.</value>
  </data>
  <data name="Validation_Argument_AssertFormat_IsLDU" xml:space="preserve">
    <value>Parameter "{0}" must be a valid postal code LDU.</value>
  </data>
  <data name="Validation_Argument_AssertFormat_IsNumber" xml:space="preserve">
    <value>Parameter "{0}" must be a number.</value>
  </data>
  <data name="Validation_Argument_AssertFormat_IsPostalCode" xml:space="preserve">
    <value>Parameter "{0}" must be a valid postal code.</value>
  </data>
  <data name="Validation_Argument_AssertFormat_IsUri" xml:space="preserve">
    <value>Parameter "{0}" must be a valid URI.</value>
  </data>
  <data name="Validation_Argument_AssertFormat_IsZIPCode" xml:space="preserve">
    <value>Parameter "{0}" must be a valid ZIP code.</value>
  </data>
  <data name="Validation_Argument_Assert_AreEqual" xml:space="preserve">
    <value>Parameter "{0}" must be equal.</value>
  </data>
  <data name="Validation_Argument_Assert_AreNotEqual" xml:space="preserve">
    <value>Parameter "{0}" must not be equal to the specified invalid value.</value>
  </data>
  <data name="Validation_Argument_Assert_AreNotReferenceEqual" xml:space="preserve">
    <value>Parameter "{0}" must not be reference equal to the specified invalid value.</value>
  </data>
  <data name="Validation_Argument_Assert_AreReferenceEqual" xml:space="preserve">
    <value>Parameter "{0}" must be reference equal.</value>
  </data>
  <data name="Validation_Argument_Assert_EndsWith" xml:space="preserve">
    <value>Parameter "{0}" must end with the specified value.</value>
  </data>
  <data name="Validation_Argument_Assert_HasAttribute" xml:space="preserve">
    <value>Parameter "{0}" must have the specified attribute.</value>
  </data>
  <data name="Validation_Argument_Assert_IsAssignable" xml:space="preserve">
    <value>Parameter "{0}" must be an assignable type.</value>
  </data>
  <data name="Validation_Argument_Assert_IsFalse" xml:space="preserve">
    <value>Parameter "{0}" must be false.</value>
  </data>
  <data name="Validation_Argument_Assert_IsInRange" xml:space="preserve">
    <value>Parameter "{0}" must be within the specified range.</value>
  </data>
  <data name="Validation_Argument_Assert_IsMaximum" xml:space="preserve">
    <value>Parameter "{0}" must be less than or equal to the specified maximum.</value>
  </data>
  <data name="Validation_Argument_Assert_IsMinimum" xml:space="preserve">
    <value>Parameter "{0}" must be greater than or equal to the specified minimum.</value>
  </data>
  <data name="Validation_Argument_Assert_IsNotNull" xml:space="preserve">
    <value>Parameter "{0}" must not be null.</value>
  </data>
  <data name="Validation_Argument_Assert_IsNotNullOrEmpty" xml:space="preserve">
    <value>Parameter "{0}" must not be null or empty.</value>
  </data>
  <data name="Validation_Argument_Assert_IsNotNullOrEmpty_Collection" xml:space="preserve">
    <value>Parameter "{0}" must not be null or empty.</value>
  </data>
  <data name="Validation_Argument_Assert_IsNotNullOrWhitespace" xml:space="preserve">
    <value>Parameter "{0}" must not be null, empty or whitespace.</value>
  </data>
  <data name="Validation_Argument_Assert_IsNull" xml:space="preserve">
    <value>Parameter "{0}" must be null.</value>
  </data>
  <data name="Validation_Argument_Assert_IsTrue" xml:space="preserve">
    <value>Parameter "{0}" must be true.</value>
  </data>
  <data name="Validation_Argument_Assert_IsType" xml:space="preserve">
    <value>Parameter "{0}" must be of the specified type.</value>
  </data>
  <data name="Validation_Argument_Assert_IsValidIndexPosition" xml:space="preserve">
    <value>Parameter "{0}" must be a valid index position.</value>
  </data>
  <data name="Validation_Argument_Assert_StartsWith" xml:space="preserve">
    <value>Parameter "{0}" must start with the specified value.</value>
  </data>
  <data name="Validation_Property_AssertFormat_IsEmail" xml:space="preserve">
    <value>Property "{0}" must be a valid email.</value>
  </data>
  <data name="Validation_Property_AssertFormat_IsFSA" xml:space="preserve">
    <value>Property "{0}" must be a valid postal code FSA.</value>
  </data>
  <data name="Validation_Property_AssertFormat_IsLDU" xml:space="preserve">
    <value>Property "{0}" must be a valid postal code LDU.</value>
  </data>
  <data name="Validation_Property_AssertFormat_IsNumber" xml:space="preserve">
    <value>Property "{0}" must be a number.</value>
  </data>
  <data name="Validation_Property_AssertFormat_IsPostalCode" xml:space="preserve">
    <value>Property "{0}" must be a valid postal code.</value>
  </data>
  <data name="Validation_Property_AssertFormat_IsUri" xml:space="preserve">
    <value>Property "{0}" must be a valid URI.</value>
  </data>
  <data name="Validation_Property_AssertFormat_IsZIPCode" xml:space="preserve">
    <value>Property "{0}" must be a valid ZIP code.</value>
  </data>
  <data name="Validation_Property_Assert_AreEqual" xml:space="preserve">
    <value>Property "{0}" must be equal.</value>
  </data>
  <data name="Validation_Property_Assert_AreNotEqual" xml:space="preserve">
    <value>Property "{0}" must not equal to the specified invalid value.</value>
  </data>
  <data name="Validation_Property_Assert_AreNotReferenceEqual" xml:space="preserve">
    <value>Property "{0}" must not be reference equal to the specified invalid value.</value>
  </data>
  <data name="Validation_Property_Assert_AreReferenceEqual" xml:space="preserve">
    <value>Property "{0}" must be reference equal.</value>
  </data>
  <data name="Validation_Property_Assert_EndsWith" xml:space="preserve">
    <value>Property "{0}" must end with the specified value.</value>
  </data>
  <data name="Validation_Property_Assert_HasAttribute" xml:space="preserve">
    <value>Property "{0}" must have the specified attribute.</value>
  </data>
  <data name="Validation_Property_Assert_IsAssignable" xml:space="preserve">
    <value>Property "{0}" must be an assignable type.</value>
  </data>
  <data name="Validation_Property_Assert_IsFalse" xml:space="preserve">
    <value>Property "{0}" must be false.</value>
  </data>
  <data name="Validation_Property_Assert_IsInRange" xml:space="preserve">
    <value>Property "{0}" must be within the specified range.</value>
  </data>
  <data name="Validation_Property_Assert_IsMaximum" xml:space="preserve">
    <value>Property "{0}" must be less than or equal to the specified maximum.</value>
  </data>
  <data name="Validation_Property_Assert_IsMinimum" xml:space="preserve">
    <value>Property "{0}" must be greater than or equal to the specified minimum.</value>
  </data>
  <data name="Validation_Property_Assert_IsNotNull" xml:space="preserve">
    <value>Property "{0}" must not be null.</value>
  </data>
  <data name="Validation_Property_Assert_IsNotNullOrEmpty" xml:space="preserve">
    <value>Property "{0}" must not be null or empty.</value>
  </data>
  <data name="Validation_Property_Assert_IsNotNullOrEmpty_Collection" xml:space="preserve">
    <value>Property "{0}" must not be null or empty.</value>
  </data>
  <data name="Validation_Property_Assert_IsNotNullOrWhitespace" xml:space="preserve">
    <value>Property "{0}" must not be null, empty or whitespace.</value>
  </data>
  <data name="Validation_Property_Assert_IsNull" xml:space="preserve">
    <value>Property "{0}" must be null.</value>
  </data>
  <data name="Validation_Property_Assert_IsTrue" xml:space="preserve">
    <value>Property "{0}" must be true.</value>
  </data>
  <data name="Validation_Property_Assert_IsType" xml:space="preserve">
    <value>Property "{0}" must be of the specified type.</value>
  </data>
  <data name="Validation_Property_Assert_IsValidIndexPosition" xml:space="preserve">
    <value>Property "{0}" must be a valid index position.</value>
  </data>
  <data name="Validation_Property_Assert_StartsWith" xml:space="preserve">
    <value>Property "{0}" must start with the specified value.</value>
  </data>
  <data name="Validation_Value_AssertFormat_IsEmail" xml:space="preserve">
    <value>Value must be a valid email.</value>
  </data>
  <data name="Validation_Value_AssertFormat_IsFSA" xml:space="preserve">
    <value>Value must be a valid postal code FSA.</value>
  </data>
  <data name="Validation_Value_AssertFormat_IsLDU" xml:space="preserve">
    <value>Value must be a valid postal code LDU.</value>
  </data>
  <data name="Validation_Value_AssertFormat_IsNumber" xml:space="preserve">
    <value>Value  must be a number.</value>
  </data>
  <data name="Validation_Value_AssertFormat_IsPostalCode" xml:space="preserve">
    <value>Value must be a valid postal code.</value>
  </data>
  <data name="Validation_Value_AssertFormat_IsUri" xml:space="preserve">
    <value>Value must be a valid URI.</value>
  </data>
  <data name="Validation_Value_AssertFormat_IsZIPCode" xml:space="preserve">
    <value>Value must be a valid ZIP code.</value>
  </data>
</root>